app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: ${BACKSTAGE_BASEURL}

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: ${BACKSTAGE_BASEURL}
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'

  # config options: https://node-postgres.com/apis/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

proxy:
  '/argocd/api':
    target: ${ARGOCD_BASEURL}/api/v1/
    changeOrigin: true
    headers:
      Cookie: 'argocd.token=${ARGOCD_AUTH_TOKEN}'
  '/grafana/api':
    target: ${GRAFANA_BASEURL}/
    headers:
      Authorization: 'Bearer ${GRAFANA_TOKEN}'

auth:
  environment: production
  providers:
    guest: null
    github:
      production:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        ## uncomment if using GitHub Enterprise
        # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
        signIn:
          resolvers:
            # Matches the GitHub username with the Backstage user entity name.
            # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers.
            - resolver: usernameMatchingUserEntityName

catalog:
  orphanStrategy: delete
  providers:
    githubOrg:
      id: production
      githubUrl: https://github.com
      orgs: ['${GITHUB_ORGS}']
      schedule:
        initialDelay: { seconds: 30 }
        frequency: { hours: 1 }
        timeout: { minutes: 50 }
    github:
      whizusLabs:
        organization: '${GITHUB_ORGS}'
        catalogPath: '/catalog-info.yaml'
        filters:
          repository: '^kcd-(?!showcase-trw-demo-app$).*'
        schedule:
          initialDelay: { seconds: 30 }
          frequency: { hours: 1 }
          timeout: { minutes: 50 }

argocd:
  baseUrl: ${ARGOCD_BASEURL}

grafana:
  domain: ${GRAFANA_BASEURL}
  # Is unified alerting enabled in Grafana?
  # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
  # Optional. Default: false
  unifiedAlerting: false

kubernetes:
  serviceLocatorMethod:
    type: multiTenant
  clusterLocatorMethods:
    - type: config
      clusters:
        - url: ${KCD_SERVICE_CLUSTER_URL}
          name: kcd-service-cluster
          authProvider: serviceAccount
          serviceAccountToken: ${KCD_SERVICE_CLUSTER_SA_TOKEN}
          caData: ${KCD_SERVICE_CLUSTER_CA_DATA}
